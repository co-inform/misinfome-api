openapi: "3.0.0"
servers:
  - url: https://socsem.kmi.open.ac.uk/misinfo/api/
    description: The deployment server
  - url: https://misinfo.me/misinfo/api/
    description: The deployment with the custom domain
  - url: http://localhost:5000/misinfo/api
    description: localhost
info:
  title: MisinfoMe API
  version: "0.1.0"
  description: >-
    Provides analysis of tweets, accounts and sources with respect to existing assessments
    that have been published online. These include fact-checks and other source-ratings.
paths:
  /credibility/sources:
    post:
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceAnalysisResult"
      description: Get the credibility of a certain source (for now just domain name)
      parameters:
        - in: query
          name: source
          description: The source to analyse
          required: true
          schema:
            type: string
        - in: query
          name: callback_url
          description: A URL to be POSTed with the result of the job (must include api.coinform.eu/ for validation)
          schema:
            type: string
            format: url
      tags:
        - credibility
  "/credibility/tweets/{tweet_id}":
    parameters:
      - in: path
        description: "The identifier of the tweet"
        name: tweet_id
        required: true
        schema:
          type: integer
    post:
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TweetAnalysisResult"
      description: Get the credibility of a certain tweet
      parameters:
        - in: query
          name: callback_url
          description: A URL to be POSTed with the result of the job (must include api.coinform.eu/ for validation)
          schema:
            type: string
            format: url
      tags:
        - credibility
  /credibility/users:
    post:
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAnalysisResult"
      parameters:
        - schema:
            type: string
          required: true
          in: query
          description: The `screen_name` of the twitter profile to analyse
          name: screen_name
        - in: query
          name: callback_url
          description: A URL to be POSTed with the result of the job (must include api.coinform.eu/ for validation)
          schema:
            type: string
            format: url
      tags:
        - credibility
  "/jobs/status/{job_id}":
    parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
    get:
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobStatus"
      description: Get the statuses of the jobs
      tags:
        - jobs
  "/jobs/status_by_callback_url":
    parameters:
      - name: callback_url
        in: query
        required: true
        schema:
          type: string
        description: The callback_url that was sent from the gateway
    get:
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobStatus"
      description: Get the statuses of the job from the callback_url
      tags:
        - jobs
  "/utils/unshorten":
    parameters:
      - name: url
        in: query
        required: true
        schema:
          type: string
        description: The URL to unshorten
    get:
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UrlUnshortenedResult"
      description: Get the full URL for common shortening domains (bit.ly / t.co / ...)
      tags:
        - utils

  "/utils/status":
    get:
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusResult"
      description: Get the health status of the service to know if everything is working properly
      tags:
        - utils

  "/data/latest":
    get:
      responses:
        "200":
          description: Success
      description: >-
        The data API allows to retrieve the latest release of the daily collection of misinformation.
        With "daily" we mean that it is updated regularly every day and the results accumulate over time.
        Some new fact-checks appear every day and others may disappear. The files does not only contain the reviews for the last day.

        The data provided comes under different files, which can be requested with the `file_name` parameter.
        The available file names can be seen in the response `files` dictionary, which is a mapping between the `file_name` and the real file path (used internally).

        If the `file_name` parameter is absent, general information about the release are provided (see the DailyStats data structure)
      tags:
        - data
    parameters:
      - name: file_name
        in: query
        required: false
        schema:
          type: string
        description: >-
          This parameter allows to download the files of the daily release. With value `zip`, the full daily collection is downloaded.
          With other values, e.g. `tweet_reviews`, only the tweet reviews are downloaded.
          The full list of valid values can be seen by doing a request to this endpoint without the `file_name` parameter, and looking at the keys of the `files` object in the response.
          Keep in mind that the `zip` is compressed while the singular files are not compressed, so download times may be longer for uncompressed.

tags:
  - name: credibility
    description: >-
      Interfacing with the credibility component.

      If `callback_url` is provided, the result is a `JobCreated` object.
      If `callback_url` is not provided, the result is a `SourceCredibility` object.
  - name: jobs
    description: Query the status of the jobs
  - name: utils
    description: Utilities
  - name: data
    description: Endpoints for downloading the datasets

components:
  schemas:
    JobCreated:
      description: Information about a job that has been created
      type: object
      required:
        - job_id
      properties:
        job_id:
          description: an identifier of the job. You can use it to get the job status
          type: string
    JobStatus:
      description: The status of a job that has been submitted. On completion it wraps a JobResult
      type: object
      required:
        - state
      properties:
        state:
          description: A description of what's going on with the job
          type: string
        result:
          $ref: "#/components/schemas/JobResult"
    JobResult:
      description: The result of a job submission
      oneOf:
        - $ref: "#/components/schemas/TweetCredibility"
        - $ref: "#/components/schemas/UserCredibility"
        - $ref: "#/components/schemas/SourceCredibility"
    TweetCredibility:
      description: The credibility assigned to a tweet
      type: object
      required:
        - credibility
        - itemReviewed
        - ratingExplanation
      properties:
        credibility:
          $ref: "#/components/schemas/Credibility"
        itemReviewed:
          type: string
        ratingExplanation:
          type: string
          format: url
          description: The explaination as URL to MisinfoMe frontend
    UserCredibility:
      description: The credibility assigned to a User (just twitter)
      type: object
      required:
        - credibility
      properties:
        credibility:
          $ref: "#/components/schemas/Credibility"
    SourceCredibility:
      description: The credibility assigned to a Source
      type: object
      required:
        - credibility
      properties:
        credibility:
          $ref: "#/components/schemas/Credibility"
    Credibility:
      type: object
      required:
        - value
        - confidence
      properties:
        value:
          type: number
          format: float
          minimum: -1.0
          maximum: 1.0
          description: The value
        confidence:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          description: The confidence of the credibility
    TweetAnalysisResult:
      description: >-
        The result of a call of a tweet analysis. It depends on the presence of `callback_url` or not.
        If `callback_url` is provided, the result is a JobCreated object.
        If `callback_url` is not provided, the result is a `TweetCredibility` object.
      oneOf:
        - $ref: "#/components/schemas/TweetCredibility"
        - $ref: "#/components/schemas/JobCreated"
    UserAnalysisResult:
      description: >-
        The result of a call of a twitter profile analysis. It depends on the presence of `callback_url` or not.
        If `callback_url` is provided, the result is a JobCreated object.
        If `callback_url` is not provided, the result is a `UserCredibility` object.
      oneOf:
        - $ref: "#/components/schemas/UserCredibility"
        - $ref: "#/components/schemas/JobCreated"
    SourceAnalysisResult:
      description: >-
        The result of a call of a source analysis. It depends on the presence of `callback_url` or not.
        If `callback_url` is provided, the result is a `JobCreated` object.
        If `callback_url` is not provided, the result is a `SourceCredibility` object.
      oneOf:
        - $ref: "#/components/schemas/SourceCredibility"
        - $ref: "#/components/schemas/JobCreated"
    UrlUnshortenedResult:
      description: >-
        The result of a call to the unshortening endpoint. It provides the URL unshortened in the field `url_full`
      type: object
      required:
        - url
        - url_full
      properties:
        url:
          type: string
          description: The requested URL
        url_full:
          type: string
          format: uri
          minimum: 0.0
          maximum: 1.0
          description: The unshortened URL
    StatusResult:
      description: >-
        The result of a call to the health status endpoint. It provides the overall status and the details of the components
      type: object
      required:
        - status
        - details
      properties:
        status:
          type: string
          description: The string `ok` if everything is ok, or `error` / `exception` if something is wrong
        details:
          type: object
          description: The status of the components
    DailyStats:
      description: >-
        This object provides the information of the daily dataset
      type: object
      required:
        - scrapers_stats
        - claim_reviews
        - tweet_reviews
        - files
        - date
      properties:
        scrapers_stats:
          type: object
          description: >-
            Details about the scrapers that have been run for this day, with the number of items collected.
            It is a map of `scraper_name` -> `len(claim_reviews_raw)`
        claim_reviews:
          $ref: "#/components/schemas/ClaimReviewsStats"
        tweet_reviews:
          $ref: "#/components/schemas/TweetReviewsStats"
        files:
          $ref: "#/components/schemas/FilesStats"
        date:
          type: string
          description: The date of collection, in the format YYYY_MM_DD
    ClaimReviewsStats:
      type: object
      description: Statistics about the ClaimReviews collected.
      required:
        - claimreviews_merged_count
        - raw_claimreviews_count
        - ifcn_domains_count
        - claimreviews_unique_review_urls_count
        - not_matching_reviews_labels_count
        - links_not_credible_count
      properties:
        claimreviews_merged_count:
          type: integer
          description: The final number of merged ClaimReviews (available in `claim_reviews.json`). ClaimReviews are merged if they have the same review URL and an almost identical reviewed claim. For this reason, the `claimreviews_unique_review_urls_count`  is smaller.
        raw_claimreviews_count:
          type: integer
          description: The number of original ClaimReviews (available in `raw_claim_reviews.json`) without doing any processing, merging and without recognising duplicates. Multiple collectors may provide the same ClaimReview
        ifcn_domains_count:
          type: integer
          description: The number of IFCN domains that has been used for filtering out untrustworthy ClaimReviews (available in `ifcn_domains.json`).
        claimreviews_unique_review_urls_count:
          type: integer
          description: The total of distinct URLs where fact-checks are published
        not_matching_reviews_labels_count:
          type: integer
          description: The number of merged ClaimReviews which have problems matching with a single Co-Inform label. They have the label `check_me` in the file `claim_reviews.json`
        links_not_credible_count:
          type: integer
          description: The total of links that have the `not_credible` label. They are available as a list in `links_not_credible.json` and their full details are in `links_not_credible_full.json`
    TweetReviewsStats:
      type: object
      description: Statistics about the Tweet reviews collected. A Tweet review happens when a ClaimReview is listing a Tweet in the appearances of a claimm
      required:
        - tweet_reviews_count
        - error_twitter_api_count
        - tweets_with_disagreeing_reviews_count
      properties:
        tweet_reviews_count:
          type: integer
          description: The number of tweets reviewed by fact-checkers through ClaimReview
        error_twitter_api_count:
          type: integer
          description: The number of tweets that were not possible to retreive due to API errors (deleted or blocked tweets).
        tweets_with_disagreeing_reviews_count:
          type: integer
          description: The number of tweets that have a `check_me` label. This happens because multiple reviews with different labels exist.
    FilesStats:
      type: object
      description: The files available to download. Use the keys of this dictionary in the `file_name` parameter in order to download the file.
      required:
        - ifcn_sources
        - claim_reviews_raw
        - claim_reviews
        - links_not_credible
        - links_not_credible_full
        - tweet_reviews
        - zip
      properties:
        ifcn_sources:
          type: integer
          description: The file containing the details about the IFCN signatories
        claim_reviews_raw:
          type: integer
          description: The file containing the unprocessed, unmerged ClaimReviews
        claim_reviews:
          type: integer
          description: The file containing the processed ClaimReviews
        links_not_credible:
          type: integer
          description: The list of misinforming URLs.
        links_not_credible_full:
          type: integer
          description: The details (fact-checker name, fact-checking URL, date, original label) about the misinforming URLs
        tweet_reviews:
          type: integer
          description: The extracted tweet reviews
        zip:
          type: integer
          description: The full archive, with inside all the files
